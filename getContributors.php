<?php
    session_start();

     // This file is generated by Composer
     require_once __DIR__ . '/vendor/autoload.php';

    use Curl\Curl;

    $curl = new Curl();
    $curl->setHeader('authorization', 'token ' . getenv('GITHUB_ACCESS_TOKEN'));

    $baseURL = 'https://api.github.com/';

    //CHECKING HTTP METHOD, MUST BE GET
    if ($_SERVER['REQUEST_METHOD'] != 'GET'){
        $httperror = array(array("status" => 405, "message" => 'Not Allowed'));
        $hasError = True;
        $httperrorcode = 405;
        goto end;
    }

    //CHECKING IF PARAMTERS ORG & PAGE ARE SET, BOTH REQUIRED
    if(!isset($_GET["org"]) || !isset($_GET["page"])){
        $httperror = array(array("status" => 400, "message" => 'Bad Request: Missing parameters'));
        $hasError = True;
        $httperrorcode = 400;
        goto end;
    }

    //CHECKING IF PAGE IS NUMERIC
    if(!is_numeric($_GET["page"])){
        $httperror = array(array("status" => 400, "message" => 'Bad Request: Parameters are invalid'));
        $hasError = True;
        $httperrorcode = 400;
        goto end;
    }
   

    $org = $_GET["org"];
    $reqPage = $_GET["page"];

    $contributors_arr = array();
    $repos_arr = array();

    $hasError = false; 

    //CHECKING IF SESSION VARIABLE ORG IS THE SAME. IF YES, WE HAVE CONTRIBUTORS ARRAY IN SESSION. NO NEED TO PULL AGAIN
    if ($org != $_SESSION['org']){
        $_SESSION['org'] = $org;
        $_SESSION['contributors_array'] = null;

        //GETTING ALL REPOS FOR ORG
        $page = 1;
        $hasMore = true;
        do {
            $curl->get($baseURL . 'orgs/'. $org . '/repos', 
                ['page' => $page]
            );
            if (empty($curl->response)){
                $hasMore = false;
            }
            else{
                if ($curl->error){
                    $httperror = array(array("status" => $curl->errorCode, "message" => $curl->response->message));
                    $hasError = True;
                    $httperrorcode = $curl->errorCode;
                    goto end;
                }
                else{
                    foreach ($curl->response as $repo){
                        $repos_arr[] = $repo->name;
                    }
                }
                $page++;
            }
        }
        while ($hasMore);

        //LOOPING THROUGH EACH REPO AND RETRIEVING CONTRIBUTORS
        $page = 1;
        $hasMore = true;
        foreach ($repos_arr as $repo){
            do {
                $curl->get($baseURL . 'repos/'. $org . '/' . $repo . '/contributors' , 
                    ['page' => $page]
                );
                if (empty($curl->response)){
                    $hasMore = false;
                }
                else{
                    if ($curl->error){
                        $httperror = array(array("status" => $curl->errorCode, "message" => $curl->response->message));
                        $hasError = True;
                        $httperrorcode = $curl->errorCode;
                        goto end;
                    }
                    else{
                        foreach ($curl->response as $contributors){// LOOPING THROUGH EACH CONTRIBUTOR OF REPO
                            $dupe_contributor = array_search($contributors->login, array_column($contributors_arr, 'username')); //SEARCHING FOR USER IN MY ARRAY = INDEX or FALSE
                            if ($dupe_contributor !== False){ //USER EXISTS, SO I ADD CONTRIBUTIONS TO PREVIOUS CONTRIBUTIONS
                                $contributors_arr[$dupe_contributor]['commits'] = $contributors_arr[$dupe_contributor]['commits'] + $contributors->contributions;
                            }
                            else{ //USER DOESNT EXIST 
                                $contributors_arr[]= array('username'=>$contributors->login, 'image_url'=>$contributors->avatar_url, 'commits'=>$contributors->contributions, 'email'=>'email', 'last_commit_title'=>'lastmsg');     
                            }
                        }
                    }
                    $page++;
                }
            }
            while ($hasMore);
        }
        //SORTING MY CONTRIBUTORS ARRAY BY COMMITS DESC
        $arr2json = array();
        foreach ($contributors_arr as $key => $value){
            $arr2json[$key] = $value['commits'];
        }
        array_multisort($arr2json, SORT_DESC, $contributors_arr);

        $_SESSION['contributors_array'] = $contributors_arr;

        if ($reqPage == 1){
            $contributors_arr = array_slice($contributors_arr, 0, 25);
        }
        else{
            $contributors_arr = array_slice($contributors_arr, (($reqPage * 25) - 25), 25);
        }

        //LOOP THROUGH EACH CONTRIBUTOR (NO DUPES) AND RETRIEVE LAST COMMIT TITLE AND EMAIL        
        foreach ($contributors_arr as $key => $value){
            $curl->get($baseURL . 'search/commits', 
                ['q' => 'author:' . $value['username'],
                'sort' => 'committer-date',
                'order' => 'desc',
                'per_page' => '1'
                ]);
            if ($curl->error){
                $httperror = array(array("status" => $curl->errorCode, "message" => $curl->response->message));
                $hasError = True;
                $httperrorcode = $curl->errorCode;
                goto end;
            }
            else{          
                $contributors_arr[$key]['last_commit_title'] = $curl->response->items[0]->commit->message; 
                $contributors_arr[$key]['email'] = $curl->response->items[0]->commit->author->email;
            }
        }
   }
    else{
        $contributors_arr = $_SESSION['contributors_array'];

        if ($reqPage == 1){
            $contributors_arr = array_slice($contributors_arr, 0, 25);
        }
        else{
            $contributors_arr = array_slice($contributors_arr, (($reqPage * 25) - 25), 25);
        }
        //LOOP THROUGH EACH CONTRIBUTOR (NO DUPES) AND RETRIEVE LAST COMMIT TITLE AND EMAIL        
        foreach ($contributors_arr as $key => $value){
            $curl->get($baseURL . 'search/commits', 
                ['q' => 'author:' . $value['username'],
                'sort' => 'committer-date',
                'order' => 'desc',
                'per_page' => '1'
                ]);
            if ($curl->error){
                $httperror = array(array("status" => $curl->errorCode, "message" => $curl->response->message));
                $httperrorcode = $curl->errorCode;
            }
            else{          
                $contributors_arr[$key]['last_commit_title'] = $curl->response->items[0]->commit->message; 
                $contributors_arr[$key]['email'] = $curl->response->items[0]->commit->author->email;
            }
        }
    }

    end:

    header("Content-type: application/json");
    if ($hasError){
        $json = json_encode($httperror);
        http_response_code($httperrorcode);
        echo $json;
    }
    else{
        $json = json_encode($contributors_arr);
        http_response_code(200);
        echo $json;
    }

    
?>